# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cVtq4tWssKOji-ZDHGb-j-rthfFOmwqG
"""

import random
import requests

class Wordle:
    def __init__(self):
        self.words = []
        response = requests.get('https://raw.githubusercontent.com/charlesreid1/five-letter-words/master/sgb-words.txt')
        data = response.text
        lines = data.strip().split('\n')
        for line in lines:
            self.words.append(line)


        self.WORD = random.choice(self.words)
        self.guesses = []
        self.feedbacks = []

    def feedback(self, guessword):
        feedback = []
        for i,letter in enumerate(guessword):
            if letter not in self.WORD:
                feedback.append(0)
            else:
                if letter == self.WORD[i]:
                    feedback.append(1)
                else:
                    feedback.append(2)

        return feedback

    def generate_guess(self, feedback = None):
        raise NotImplementedError("Implement the generate_guess() function first.")
        return ""

    def run(self):
        feedback = None
        flag = False
        self.scores = []
        for l in range(len(self.words)):
          self.scores.append(0)

        for i in range(10):
            guessword = self.generate_guess(feedback)
            feedback = self.feedback(guessword)
            self.feedbacks.append(feedback)
            self.guesses.append(guessword)

            print("\tGuess #", i+1, "\t:", guessword, "\tFeedback: ", feedback)

            if guessword == self.WORD:
                flag = True
                print("\t\nSuccess.\tCorrect word: ",guessword, "\tNumber of guesses: ", len(self.feedbacks))
                break

        if not flag:
            print("\tFailed to find correct word within 10 guesses. \t Correct word: ", self.WORD)

        print('\n')


class Game:
    def __init__(self, Solver, N=10):
        self.Solver = Solver
        self.N = N

    def run(self):
        print("Simulating for ", self.N, " words.\n")
        for i in range(self.N):
            solver = self.Solver()
            print("WORD #[", i+1, "/", self.N, "]")
            solver.run()

class Solver(Wordle):
    def __init__(self):
        super().__init__()

    def generate_guess(self, feedback=None):
        if(feedback ==None):
          guess = "plant"
          f = self.feedback(guess)
        else:
          guess = random.choice(self.words)
        while(len(self.guesses)>0 and guess in self.guesses):
          windex = self.words.index(guess)
          self.scores[windex]-=10
          guess = self.words[self.scores.index(max(self.scores))]
        f = self.feedback(guess)
        k = 0
        for j in f:
          letter = guess[k]
          if(j==0):
            for w in self.words:
              if(letter in w):
                self.words.remove(w)
          if(j==1):
            for w in self.words:
              if(letter!=w[k] or letter not in w):
                self.words.remove(w)

          if(j==2):
            for w in self.words:
              if(letter==w[k] or letter not in w):
                self.words.remove(w)
          k+=1
          k = k%5


          if(k>4):
            break
        """
        Your code goes here
        """

        return guess

#just added strip in line 9 so that last line is taken care of oterwise it generates index error

game = Game(Solver, N=10)
game.run()

